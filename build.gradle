plugins {
    id 'java'
    // PMD
    id 'pmd'
    // jacoco
    id 'jacoco'
}

repositories {
    mavenCentral()
}


test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        includes = ['nl.tudelft.sem.template.*']
        excludes = []
    }
}

jacocoTestCoverageVerification() {
    dependsOn test
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['nl.tudelft.sem.template.*']

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.1
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(jacocoTestReport)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.jacocoTestReport.dependsOn(it)
            }
        }
    }
    reports {
        xml.required = true
    }
    //executionData tasks.withType(Test).findAll { it.state.executed }
}

subprojects {

}